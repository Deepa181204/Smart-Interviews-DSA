/* spiral traversal*/
import java.util.*;

public class Main {
    public static List<Integer> spiral(int[][] a) {
        List<Integer> res = new ArrayList<>();
        int t = 0, l = 0, b = a.length - 1, r = a[0].length - 1;

        while (t <= b && l <= r) {
            for (int i = l; i <= r; i++) res.add(a[t][i]);
            t++;
            for (int i = t; i <= b; i++) res.add(a[i][r]);
            r--;
            if (t <= b) {
                for (int i = r; i >= l; i--) res.add(a[b][i]);
                b--;
            }
            if (l <= r) {
                for (int i = b; i >= t; i--) res.add(a[i][l]);
                l++;
            }
        }
        return res;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), m = sc.nextInt();
        int[][] a = new int[n][m];

        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                a[i][j] = sc.nextInt();

        List<Integer> res = spiral(a);
        for (int num : res) System.out.print(num + " ");
    }
}

__________________________________________________________

//buy and sell stock
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), a[] = new int[n];

        for (int i = 0; i < n; i++) a[i] = sc.nextInt();

        System.out.println("Max profit is: " + maxProfit(a));
    }

    static int maxProfit(int[] a) {
        int maxP = 0, minP = Integer.MAX_VALUE;
        for (int i : a) {
            minP = Math.min(minP, i);
            maxP = Math.max(maxP, i - minP);
        }
        return maxP;
    }
}
___________________________________________________________
//FindMissingNumbers
import java.util.*;

class FindMissingNumbers {
    public static List<Integer> findMissingNumbers(int[] nums) {
        Set<Integer> presentNumbers = new HashSet<>();
        List<Integer> missingNumbers = new ArrayList<>();

        for (int num : nums) {
            presentNumbers.add(num);
        }

        for (int i = 1; i <= nums.length; i++) {
            if (!presentNumbers.contains(i)) {
                missingNumbers.add(i);
            }
        }

        return missingNumbers;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();
        int[] nums = new int[n];

        System.out.println("Enter " + n + " numbers between 1 and " + n + ":");
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        System.out.println("Missing numbers: " + findMissingNumbers(nums));

        scanner.close();
    }
}
________________________________________________________________________________________
//LongestMountain
class LongestMountain {
    public static int longestMountain(int[] arr) {
        int n = arr.length;
        int maxLength = 0;
        int i = 1;

        while (i < n - 1) {
            if (arr[i - 1] < arr[i] && arr[i] > arr[i + 1]) {
                int left = i - 1, right = i + 1;
                while (left > 0 && arr[left - 1] < arr[left]) left--;
                while (right < n - 1 && arr[right] > arr[right + 1]) right++;
                maxLength = Math.max(maxLength, right - left + 1);
                i = right;
            } else {
                i++;
            }
        }
        return maxLength >= 3 ? maxLength : 0;
    }

    public static void main(String[] args) {
        int[] arr = {2, 1, 4, 7, 3, 2, 5};
        System.out.println(longestMountain(arr));
    }
}

________________________________________________________________________________________
//TravelTimeCalculator
class TravelTimeCalculator {
    public static int calculateMinTime(int[][] coordinates) {
        int totalTime = 0;
        
        for (int i = 1; i < coordinates.length; i++) {
            int xDiff = Math.abs(coordinates[i][0] - coordinates[i - 1][0]);
            int yDiff = Math.abs(coordinates[i][1] - coordinates[i - 1][1]);
            totalTime += Math.max(xDiff, yDiff);
        }
        
        return totalTime;
    }

    public static void main(String[] args) {
        int[][] coordinates = {{1, 1}, {3, 4}, {-1, 0}};
        System.out.println(calculateMinTime(coordinates));
    }
}

__________________________________________________________
//MissingNumber
import java.util.*;

public class FindMissingNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int[] numbers = new int[size];

        for (int i = 0; i < size; i++) {
            numbers[i] = scanner.nextInt();
        }

        System.out.println(findMissing(numbers));
        scanner.close();
    }

    static int findMissing(int[] numbers) {
        int xorResult = 0;

        for (int i = 0; i <= numbers.length; i++) {
            xorResult ^= i;
        }
        for (int num : numbers) {
            xorResult ^= num;
        }

        return xorResult;
    }
}
__________________________________________________________
//IslandCounter
class IslandCounter {
    public static void exploreIsland(char[][] map, int row, int col) {
        int rows = map.length, cols = map[0].length;

        if (row < 0 || col < 0 || row >= rows || col >= cols || map[row][col] == '0') {
            return;
        }

        map[row][col] = '0';

        exploreIsland(map, row + 1, col);
        exploreIsland(map, row - 1, col);
        exploreIsland(map, row, col + 1);
        exploreIsland(map, row, col - 1);
    }

    public static int countIslands(char[][] map) {
        int islandCount = 0;
        int rows = map.length, cols = map[0].length;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (map[row][col] == '1') {
                    islandCount++;
                    exploreIsland(map, row, col);
                }
            }
        }

        return islandCount;
    }

    public static void main(String[] args) {
        char[][] map = {
            {'1', '1', '0', '0', '0'},
            {'1', '1', '0', '0', '0'},
            {'0', '0', '1', '0', '0'},
            {'0', '0', '0', '1', '1'}
        };

        System.out.println(countIslands(map));
    }
}

__________________________________________________________
//NumbersSmallerThanCurrent
import java.util.*;

class NumbersSmallerThanCurrent {
    static List<Integer> smallerNumbersThanCurrent(int[] nums) {
        int[] sortedNums = nums.clone();
        Arrays.sort(sortedNums);

        Map<Integer, Integer> countMap = new HashMap<>();
        for (int i = 0; i < sortedNums.length; i++) {
            countMap.putIfAbsent(sortedNums[i], i); // Store index only the first time
        }

        List<Integer> result = new ArrayList<>();
        for (int num : nums) {
            result.add(countMap.get(num));
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {8, 1, 2, 2, 3};
        System.out.println(smallerNumbersThanCurrent(nums));
    }
}

__________________________________________________________
//UniqueElements
import java.util.*;

class UniqueElements {
    static int removeDuplicates(int[] numbers) {
        if (numbers.length == 0) return 0; 
        
        int index = 0;
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] != numbers[index]) {
                index++;
                numbers[index] = numbers[i];
            }
        }
        return index + 1;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int[] numbers = new int[size];

        for (int i = 0; i < size; i++) {
            numbers[i] = scanner.nextInt();
        }

        int uniqueCount = removeDuplicates(numbers);

        for (int i = 0; i < uniqueCount; i++) {
            System.out.print(numbers[i] + " ");
        }

        scanner.close();
    }
}
__________________________________________________________
//SquareAndSort
class SquareAndSort {
    public static int[] getSortedSquares(int[] numbers) {
        int size = numbers.length;
        int[] squaredArray = new int[size];
        int left = 0, right = size - 1, position = size - 1;

        while (position >= 0) {
            int leftSquare = numbers[left] * numbers[left];
            int rightSquare = numbers[right] * numbers[right];

            if (leftSquare > rightSquare) {
                squaredArray[position] = leftSquare;
                left++;
            } else {
                squaredArray[position] = rightSquare;
                right--;
            }
            position--;
        }
        return squaredArray;
    }

    public static void main(String[] args) {
        int[] numbers = {-4, -1, 0, 3, 10};
        int[] sortedSquares = getSortedSquares(numbers);
        
        for (int num : sortedSquares) {
            System.out.print(num + " ");
        }
    }
}
__________________________________________________________
//ThreeNumberSum
import java.util.*;

class ThreeNumberSum {
    static boolean hasThreeSum(int[] numbers, int targetSum) {
        int size = numbers.length;
        Arrays.sort(numbers); 

        for (int i = 0; i < size - 2; i++) {
            int left = i + 1, right = size - 1;

            while (left < right) {
                int currentSum = numbers[i] + numbers[left] + numbers[right];

                if (currentSum == targetSum) {
                    return true;
                } else if (currentSum < targetSum) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int targetSum = scanner.nextInt();
        int[] numbers = new int[size];

        for (int i = 0; i < size; i++) {
            numbers[i] = scanner.nextInt();
        }

        System.out.println(hasThreeSum(numbers, targetSum));

        scanner.close();
    }
}
__________________________________________________________
//PairWithTargetSum
import java.util.*;

public class PairWithTargetSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int size = scanner.nextInt();
        int[] numbers = new int[size];

        for (int i = 0; i < size; i++) {
            numbers[i] = scanner.nextInt();
        }

        int targetSum = scanner.nextInt();

        int[] result = findTwoSum(numbers, targetSum);
        System.out.println(Arrays.toString(result));

        scanner.close();
    }

    static int[] findTwoSum(int[] numbers, int targetSum) {
        int left = 0, right = numbers.length - 1;
        int[] result = new int[2];

        while (left < right) {
            int sum = numbers[left] + numbers[right];

            if (sum == targetSum) {
                result[0] = left;
                result[1] = right;
                return result;
            } else if (sum > targetSum) {
                right--;
            } else {
                left++;
            }
        }
        return result;
    }
}
